{
  "paragraphs": [
    {
      "text": "%md\n\n## Install PySpark and PyWebHDFS",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:33.001",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eInstall PySpark and PyWebHDFS\u003c/h2\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462417_1263111963",
      "id": "20180701-070656_502745265",
      "dateCreated": "2021-07-09 09:04:22.417",
      "dateStarted": "2021-07-09 12:33:33.028",
      "dateFinished": "2021-07-09 12:33:33.039",
      "status": "FINISHED"
    },
    {
      "text": "%python\n!pip install pyspark pywebhdfs\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:33.127",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Requirement already satisfied: pyspark in /opt/conda/lib/python3.7/site-packages (3.1.2)\r\nRequirement already satisfied: pywebhdfs in /opt/conda/lib/python3.7/site-packages (0.4.1)\r\nRequirement already satisfied: py4j\u003d\u003d0.10.9 in /opt/conda/lib/python3.7/site-packages (from pyspark) (0.10.9)\r\nRequirement already satisfied: six in /opt/conda/lib/python3.7/site-packages (from pywebhdfs) (1.15.0)\r\nRequirement already satisfied: requests in /opt/conda/lib/python3.7/site-packages (from pywebhdfs) (2.24.0)\r\nRequirement already satisfied: chardet\u003c4,\u003e\u003d3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests-\u003epywebhdfs) (3.0.4)\r\nRequirement already satisfied: certifi\u003e\u003d2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests-\u003epywebhdfs) (2020.12.5)\r\nRequirement already satisfied: urllib3!\u003d1.25.0,!\u003d1.25.1,\u003c1.26,\u003e\u003d1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests-\u003epywebhdfs) (1.25.11)\r\nRequirement already satisfied: idna\u003c3,\u003e\u003d2.5 in /opt/conda/lib/python3.7/site-packages (from requests-\u003epywebhdfs) (2.10)\r\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821536088_234652206",
      "id": "paragraph_1625821536088_234652206",
      "dateCreated": "2021-07-09 09:05:36.088",
      "dateStarted": "2021-07-09 12:33:33.191",
      "dateFinished": "2021-07-09 12:33:43.414",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Reading JSON data in Spark\n\nReading JSON files is as simple as reading CSV files. A schema is also inferred automatically.",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:43.416",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eReading JSON data in Spark\u003c/h2\u003e\n\u003cp\u003eReading JSON files is as simple as reading CSV files. A schema is also inferred automatically.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821561309_2045933021",
      "id": "paragraph_1625821561309_2045933021",
      "dateCreated": "2021-07-09 09:06:01.309",
      "dateStarted": "2021-07-09 12:33:43.423",
      "dateFinished": "2021-07-09 12:33:43.431",
      "status": "FINISHED"
    },
    {
      "text": "%python\nfrom pywebhdfs.webhdfs import PyWebHdfsClient\nhdfs \u003d PyWebHdfsClient(host\u003d\u0027namenode\u0027,port\u003d\u00279870\u0027, user_name\u003d\u0027hdfs\u0027)\nobj \u003d hdfs.list_dir(\u0027/datalake_storage/60e6d190fc1bd4c64cf78291\u0027)[\u0027FileStatuses\u0027][\u0027FileStatus\u0027]\nfor item in obj:\n    print(\"File: \", item[\u0027pathSuffix\u0027])\n\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:43.523",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "File:  03931476-1b1a-460e-865e-f0bce8c5a849.xml\nFile:  2ed209f7-1777-41ab-8910-40498eb97c0f.xml\nFile:  37941b34-6ac0-4a53-b124-9806ccb2df59.xml\nFile:  64df66a8-c3d4-4154-9455-2729faca4f77.xml\nFile:  760e9ce7-178a-4e27-a519-eeec706ff7a9.xml\nFile:  877c2987-236f-48a2-a071-06cc59ea7f7f.csv\nFile:  8a4a286d-877e-42f0-bb39-5a94544b5284.csv\nFile:  9138135e-6866-4547-9f3c-7ac157adf54f.json\nFile:  9282d8ae-54a0-458d-83fc-95b422594a6e.json\nFile:  a7d55133-b214-4112-be31-9b20c6843292.xml\nFile:  ac7b8467-a1f7-493f-9f0d-f0796d6d6105.xml\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821754699_826686903",
      "id": "paragraph_1625821754699_826686903",
      "dateCreated": "2021-07-09 09:09:14.699",
      "dateStarted": "2021-07-09 12:33:43.529",
      "dateFinished": "2021-07-09 12:33:43.700",
      "status": "FINISHED"
    },
    {
      "text": "%python\n%python\nfrom pyspark import SparkContext, SparkConf\nfrom pyspark.sql.dataframe import DataFrame\nfrom pyspark.sql.session import SparkSession\n\n\nconf \u003d SparkConf().set(\"spark.jars.packages\", \"com.databricks:spark-xml_2.12:0.10.0\")\nsc \u003d SparkContext(conf\u003dconf)",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:09:54.944",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625836194057_152196721",
      "id": "paragraph_1625836194057_152196721",
      "dateCreated": "2021-07-09 13:09:54.057",
      "status": "READY"
    },
    {
      "text": "%python\nuri \u003d \u0027hdfs://namenode:9000/datalake_storage/60e6d190fc1bd4c64cf78291/9138135e-6866-4547-9f3c-7ac157adf54f.json\u0027\nteamData \u003d SparkSession.builder.appName(\u0027zeppelin\u0027).getOrCreate().read.json(uri, multiLine\u003dTrue)\nteamData.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:10:02.833",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+\n|              season|\n+--------------------+\n|{2013, [{[{Benagl...|\n+--------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625822460437_955016333",
      "id": "paragraph_1625822460437_955016333",
      "dateCreated": "2021-07-09 09:21:00.437",
      "dateStarted": "2021-07-09 13:10:02.839",
      "dateFinished": "2021-07-09 13:10:03.106",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Extracting Metadata\n\nMetadata is automatically extracted (or generated) from the JSON file while reading it into a DataFrame. Each DataFrame is associated with metadata which can be shown with `printSchema`.",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:55.954",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExtracting Metadata\u003c/h2\u003e\n\u003cp\u003eMetadata is automatically extracted (or generated) from the JSON file while reading it into a DataFrame. Each DataFrame is associated with metadata which can be shown with \u003ccode\u003eprintSchema\u003c/code\u003e.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462417_208493554",
      "id": "20180701-172351_387289613",
      "dateCreated": "2021-07-09 09:04:22.417",
      "dateStarted": "2021-07-09 12:33:55.960",
      "dateFinished": "2021-07-09 12:33:55.973",
      "status": "FINISHED"
    },
    {
      "text": "%python\nteamData.printSchema()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:10:05.580",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- season: struct (nullable \u003d true)\n |    |-- Season: string (nullable \u003d true)\n |    |-- TeamData: array (nullable \u003d true)\n |    |    |-- element: struct (containsNull \u003d true)\n |    |    |    |-- PlayerData: array (nullable \u003d true)\n |    |    |    |    |-- element: struct (containsNull \u003d true)\n |    |    |    |    |    |-- Player_Name: string (nullable \u003d true)\n |    |    |    |-- TeamName: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462418_1773064414",
      "id": "20180701-071005_1024841444",
      "dateCreated": "2021-07-09 09:04:22.418",
      "dateStarted": "2021-07-09 13:10:05.583",
      "dateFinished": "2021-07-09 13:10:05.653",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Data Transformation for JSON Data\n\nThe TeamData JSON file is a deeply nested structure which is not easily usable directly in Spark. We have to \"flatten\" it with a sequence of `select` and `explode` functions.\n\n* `df.select(c1,c2,...,cn)`: Creates a new DataFrame from `df` by applying the expressions c1, c2, ..., cn to the columns of the input DataFrame.\n* `df.explode($\"ArrayCol\").as(\"N\")`: Unrolls the array in the column `ArrayCol` and makes the individual values available in the column `N`.\n* `$\"NAME\" or col(NAME)`: Refers to the column `NAME` from the current DataFrame.\n\nThere are many other functions that can be applied to columns of a DataFrame. A full list is available [here](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$).\n \nThe following example transforms the input table with the nested JSON document into a flat table with player name and team name.\n\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:56.166",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eData Transformation for JSON Data\u003c/h2\u003e\n\u003cp\u003eThe TeamData JSON file is a deeply nested structure which is not easily usable directly in Spark. We have to \u0026ldquo;flatten\u0026rdquo; it with a sequence of \u003ccode\u003eselect\u003c/code\u003e and \u003ccode\u003eexplode\u003c/code\u003e functions.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edf.select(c1,c2,...,cn)\u003c/code\u003e: Creates a new DataFrame from \u003ccode\u003edf\u003c/code\u003e by applying the expressions c1, c2, \u0026hellip;, cn to the columns of the input DataFrame.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edf.explode($\u0026quot;ArrayCol\u0026quot;).as(\u0026quot;N\u0026quot;)\u003c/code\u003e: Unrolls the array in the column \u003ccode\u003eArrayCol\u003c/code\u003e and makes the individual values available in the column \u003ccode\u003eN\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$\u0026quot;NAME\u0026quot; or col(NAME)\u003c/code\u003e: Refers to the column \u003ccode\u003eNAME\u003c/code\u003e from the current DataFrame.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are many other functions that can be applied to columns of a DataFrame. A full list is available \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe following example transforms the input table with the nested JSON document into a flat table with player name and team name.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625823687971_1335622438",
      "id": "paragraph_1625823687971_1335622438",
      "dateCreated": "2021-07-09 09:41:27.971",
      "dateStarted": "2021-07-09 12:33:56.170",
      "dateFinished": "2021-07-09 12:33:56.185",
      "status": "FINISHED"
    },
    {
      "text": "%python\nfrom pyspark.sql.functions import explode, monotonically_increasing_id\n\nteamData2 \u003d teamData.select(teamData.season,explode(teamData.season.TeamData).alias(\"seasonX\")) \nteamData3 \u003d teamData2.select(teamData2.seasonX, explode(teamData2.seasonX.PlayerData).alias(\"player\"), teamData2.seasonX.TeamName.alias(\"TeamName\"))\nteamDataExploded \u003d teamData3.select(teamData3.player.Player_Name.alias(\"PlayerName\"),teamData3.TeamName) \\\n                    .withColumn(\"PlayerID\", monotonically_increasing_id())\n                    \nteamDataExploded.printSchema()\nteamDataExploded.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:10:08.983",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- PlayerName: string (nullable \u003d true)\n |-- TeamName: string (nullable \u003d true)\n |-- PlayerID: long (nullable \u003d false)\n\n+-------------------+-------------+--------+\n|         PlayerName|     TeamName|PlayerID|\n+-------------------+-------------+--------+\n|    Benaglio, Diego|vfl-wolfsburg|       0|\n|          Grün, Max|vfl-wolfsburg|       1|\n|     Hasebe, Makoto|vfl-wolfsburg|       2|\n|        Klose, Timm|vfl-wolfsburg|       3|\n|      Knoche, Robin|vfl-wolfsburg|       4|\n|              Naldo|vfl-wolfsburg|       5|\n|      Ochs, Patrick|vfl-wolfsburg|       6|\n| Rodriguez, Ricardo|vfl-wolfsburg|       7|\n|    Schäfer, Marcel|vfl-wolfsburg|       8|\n|  Träsch, Christian|vfl-wolfsburg|       9|\n| Arnold, Maximilian|vfl-wolfsburg|      10|\n|  Caligiuri, Daniel|vfl-wolfsburg|      11|\n|   De Bruyne, Kevin|vfl-wolfsburg|      12|\n|              Diego|vfl-wolfsburg|      13|\n|      Evseev, Willi|vfl-wolfsburg|      14|\n|     Junior Malanda|vfl-wolfsburg|      15|\n|      Koo, Ja-Cheol|vfl-wolfsburg|      16|\n|       Luiz Gustavo|vfl-wolfsburg|      17|\n|Medojevic, Slobodan|vfl-wolfsburg|      18|\n|         Polak, Jan|vfl-wolfsburg|      19|\n+-------------------+-------------+--------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625823352524_191271795",
      "id": "paragraph_1625823352524_191271795",
      "dateCreated": "2021-07-09 09:35:52.524",
      "dateStarted": "2021-07-09 13:10:08.988",
      "dateFinished": "2021-07-09 13:10:09.256",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Reading XML Data in Spark\n\nReading XML data is very similar to reading CSV or JSON data. The extracted data is also stored in a DataFrame with nesting, the extracted schema is also very similar to that one extracted from the JSON file.\n\nWe have to specify the XML element (`rowTag`) for which a row will be created in the DataFrame. Here, we will use `Match`. In case we would like to have a row for each goal, we need to explode the `Goals` element.",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:33:57.175",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eReading XML Data in Spark\u003c/h2\u003e\n\u003cp\u003eReading XML data is very similar to reading CSV or JSON data. The extracted data is also stored in a DataFrame with nesting, the extracted schema is also very similar to that one extracted from the JSON file.\u003c/p\u003e\n\u003cp\u003eWe have to specify the XML element (\u003ccode\u003erowTag\u003c/code\u003e) for which a row will be created in the DataFrame. Here, we will use \u003ccode\u003eMatch\u003c/code\u003e. In case we would like to have a row for each goal, we need to explode the \u003ccode\u003eGoals\u003c/code\u003e element.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462418_1084796852",
      "id": "20180701-174059_933747689",
      "dateCreated": "2021-07-09 09:04:22.418",
      "dateStarted": "2021-07-09 12:33:57.179",
      "dateFinished": "2021-07-09 12:33:57.188",
      "status": "FINISHED"
    },
    {
      "text": "%python\nfrom pyspark.sql import SQLContext\n\nsqlc \u003d SQLContext(sc)\nuri \u003d \u0027hdfs://namenode:9000/datalake_storage/60e6d190fc1bd4c64cf78291/2ed209f7-1777-41ab-8910-40498eb97c0f.xml\u0027\nmatchxml \u003d sqlc.read \\\n        .format(\"com.databricks.spark.xml\").option(\"rootTag\", \"ArrayOfMatch\").option(\"rowTag\", \"Match\") \\\n        .load(uri)\n\nmatchxml.printSchema()\nmatchxml.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:38:50.378",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n\n++\n||\n++\n++\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625832949914_101718927",
      "id": "paragraph_1625832949914_101718927",
      "dateCreated": "2021-07-09 12:15:49.914",
      "dateStarted": "2021-07-09 12:38:50.385",
      "dateFinished": "2021-07-09 12:38:50.553",
      "status": "FINISHED"
    },
    {
      "text": "%python\nsqlc \u003d SQLContext(sc)\nuri \u003d \u0027/opt/zeppelin/Bundesliga_2013_MatchData.xml\u0027\nmatchxml \u003d sqlc.read \\\n        .format(\"com.databricks.spark.xml\").option(\"rootTag\", \"ArrayOfMatch\").option(\"rowTag\", \"Match\") \\\n        .load(uri)\n\nmatchxml.printSchema()\nmatchxml.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:01:30.314",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- Goals: struct (nullable \u003d true)\n |    |-- Goal: array (nullable \u003d true)\n |    |    |-- element: struct (containsNull \u003d true)\n |    |    |    |-- Comment: struct (nullable \u003d true)\n |    |    |    |    |-- _VALUE: string (nullable \u003d true)\n |    |    |    |    |-- _i:nil: boolean (nullable \u003d true)\n |    |    |    |-- GoalGetterID: long (nullable \u003d true)\n |    |    |    |-- GoalGetterName: string (nullable \u003d true)\n |    |    |    |-- GoalID: long (nullable \u003d true)\n |    |    |    |-- IsOvertime: boolean (nullable \u003d true)\n |    |    |    |-- IsOwnGoal: boolean (nullable \u003d true)\n |    |    |    |-- IsPenalty: boolean (nullable \u003d true)\n |    |    |    |-- MatchMinute: struct (nullable \u003d true)\n |    |    |    |    |-- _VALUE: long (nullable \u003d true)\n |    |    |    |    |-- _i:nil: boolean (nullable \u003d true)\n |    |    |    |-- ScoreTeam1: long (nullable \u003d true)\n |    |    |    |-- ScoreTeam2: long (nullable \u003d true)\n |-- Group: struct (nullable \u003d true)\n |    |-- GroupID: long (nullable \u003d true)\n |    |-- GroupName: string (nullable \u003d true)\n |    |-- GroupOrderID: long (nullable \u003d true)\n |-- LastUpdateDateTime: string (nullable \u003d true)\n |-- LeagueId: long (nullable \u003d true)\n |-- LeagueName: string (nullable \u003d true)\n |-- Location: struct (nullable \u003d true)\n |    |-- LocationCity: string (nullable \u003d true)\n |    |-- LocationID: long (nullable \u003d true)\n |    |-- LocationStadium: string (nullable \u003d true)\n |-- MatchDateTime: string (nullable \u003d true)\n |-- MatchDateTimeUTC: string (nullable \u003d true)\n |-- MatchID: long (nullable \u003d true)\n |-- MatchIsFinished: boolean (nullable \u003d true)\n |-- MatchResults: struct (nullable \u003d true)\n |    |-- MatchResult: array (nullable \u003d true)\n |    |    |-- element: struct (containsNull \u003d true)\n |    |    |    |-- PointsTeam1: long (nullable \u003d true)\n |    |    |    |-- PointsTeam2: long (nullable \u003d true)\n |    |    |    |-- ResultDescription: string (nullable \u003d true)\n |    |    |    |-- ResultID: long (nullable \u003d true)\n |    |    |    |-- ResultName: string (nullable \u003d true)\n |    |    |    |-- ResultOrderID: long (nullable \u003d true)\n |    |    |    |-- ResultTypeID: long (nullable \u003d true)\n |-- NumberOfViewers: struct (nullable \u003d true)\n |    |-- _VALUE: long (nullable \u003d true)\n |    |-- _i:nil: boolean (nullable \u003d true)\n |-- Team1: struct (nullable \u003d true)\n |    |-- ShortName: string (nullable \u003d true)\n |    |-- TeamIconUrl: string (nullable \u003d true)\n |    |-- TeamId: long (nullable \u003d true)\n |    |-- TeamName: string (nullable \u003d true)\n |-- Team2: struct (nullable \u003d true)\n |    |-- ShortName: string (nullable \u003d true)\n |    |-- TeamIconUrl: string (nullable \u003d true)\n |    |-- TeamId: long (nullable \u003d true)\n |    |-- TeamName: string (nullable \u003d true)\n |-- TimeZoneID: string (nullable \u003d true)\n\n+--------------------+--------------------+--------------------+--------+--------------------+--------------------+-------------------+--------------------+-------+---------------+--------------------+---------------+--------------------+--------------------+--------------------+\n|               Goals|               Group|  LastUpdateDateTime|LeagueId|          LeagueName|            Location|      MatchDateTime|    MatchDateTimeUTC|MatchID|MatchIsFinished|        MatchResults|NumberOfViewers|               Team1|               Team2|          TimeZoneID|\n+--------------------+--------------------+--------------------+--------+--------------------+--------------------+-------------------+--------------------+-------+---------------+--------------------+---------------+--------------------+--------------------+--------------------+\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{München, 34, All...|2013-08-09T20:30:00|2013-08-09T18:30:00Z|  23711|           true|{[{2, 1, Ergebnis...|  {71000, null}|{FC Bayern, https...|{Mönchengladbach,...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{Leverkusen, 28, ...|2013-08-10T15:30:00|2013-08-10T13:30:00Z|  23714|           true|{[{1, 1, Ergebnis...|  {27136, null}|{Leverkusen, http...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{Hannover, 845, H...|2013-08-10T15:30:00|2013-08-10T13:30:00Z|  23715|           true|{[{2, 0, Ergebnis...|  {44800, null}|{, https://upload...|{VfL Wolfsburg, h...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{Sinsheim, 511, W...|2013-08-10T15:30:00|2013-08-10T13:30:00Z|  23716|           true|{[{2, 2, Ergebnis...|  {25730, null}|{, https://www.op...|{, https://www.op...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{Augsburg, 494, S...|2013-08-10T15:30:00|2013-08-10T13:30:00Z|  23718|           true|{[{0, 4, Ergebnis...|  {30660, null}|{, https://www.op...|{BVB, https://upl...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:47:...|     623|1. Fussball-Bunde...|{Berlin, 22, Olym...|2013-08-10T15:30:00|2013-08-10T13:30:00Z|  23720|           true|{[{2, 1, Ergebnis...|  {54376, null}|{, https://upload...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:43:...|     623|1. Fussball-Bunde...|{Braunschweig, 35...|2013-08-10T18:30:00|2013-08-10T16:30:00Z|  23719|           true|{[{0, 0, Ergebnis...|  {23000, null}|{, https://www.op...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:48:...|     623|1. Fussball-Bunde...|{Mainz, 465, Cofa...|2013-08-11T15:30:00|2013-08-11T13:30:00Z|  23717|           true|{[{3, 2, Ergebnis...|  {30279, null}|{Mainz 05, https:...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13608, 1. Spielt...|2013-09-20T08:48:...|     623|1. Fussball-Bunde...|{Gelsenkirchen, 4...|2013-08-11T17:30:00|2013-08-11T15:30:00Z|  23713|           true|{[{2, 2, Ergebnis...|  {61973, null}|{Schalke, https:/...|{HSV, https://upl...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:32:...|     623|1. Fussball-Bunde...|{Stuttgart, 493, ...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23725|           true|{[{0, 1, Ergebnis...|  {40800, null}|{, https://upload...|{Leverkusen, http...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:34:...|     623|1. Fussball-Bunde...|{Wolfsburg, 20, V...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23726|           true|{[{4, 0, Ergebnis...|  {28405, null}|{VfL Wolfsburg, h...|{Schalke, https:/...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:35:...|     623|1. Fussball-Bunde...|{Bremen, 36, Wese...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23727|           true|{[{1, 0, Ergebnis...|  {40112, null}|{, https://upload...|{, https://www.op...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:36:...|     623|1. Fussball-Bunde...|{Freiburg, 516, M...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23729|           true|{[{1, 2, Ergebnis...|  {23100, null}|{, https://upload...|{Mainz 05, https:...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:37:...|     623|1. Fussball-Bunde...|{Hamburg , 404, I...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23730|           true|{[{1, 5, Ergebnis...|  {47483, null}|{HSV, https://upl...|{, https://www.op...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:37:...|     623|1. Fussball-Bunde...|{Frankfurt, 183, ...|2013-08-17T15:30:00|2013-08-17T13:30:00Z|  23731|           true|{[{0, 1, Ergebnis...|  {51500, null}|{, https://upload...|{FC Bayern, https...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:39:...|     623|1. Fussball-Bunde...|{Mönchengladbach,...|2013-08-17T18:30:00|2013-08-17T16:30:00Z|  23722|           true|{[{3, 0, Ergebnis...|  {46089, null}|{Mönchengladbach,...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-11-01T22:26:...|     623|1. Fussball-Bunde...|{Nürnberg, 800, G...|2013-08-18T15:30:00|2013-08-18T13:30:00Z|  23728|           true|{[{1, 0, Ergebnis...|  {37068, null}|{, https://www.op...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13609, 2. Spielt...|2013-08-25T18:43:...|     623|1. Fussball-Bunde...|{Dortmund, 184, S...|2013-08-18T17:30:00|2013-08-18T15:30:00Z|  23721|           true|{[{2, 1, Ergebnis...|  {80200, null}|{BVB, https://upl...|{, https://www.op...|W. Europe Standar...|\n|{[{{null, true}, ...|{13610, 3. Spielt...|2013-08-25T18:44:...|     623|1. Fussball-Bunde...|{Dortmund, 184, S...|2013-08-23T20:30:00|2013-08-23T18:30:00Z|  23741|           true|{[{1, 0, Ergebnis...|  {80645, null}|{BVB, https://upl...|{, https://upload...|W. Europe Standar...|\n|{[{{null, true}, ...|{13610, 3. Spielt...|2013-09-22T22:11:...|     623|1. Fussball-Bunde...|{München, 34, All...|2013-08-24T15:30:00|2013-08-24T13:30:00Z|  23747|           true|{[{2, 0, Ergebnis...|  {71000, null}|{FC Bayern, https...|{, https://www.op...|W. Europe Standar...|\n+--------------------+--------------------+--------------------+--------+--------------------+--------------------+-------------------+--------------------+-------+---------------+--------------------+---------------+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625834285016_149489750",
      "id": "paragraph_1625834285016_149489750",
      "dateCreated": "2021-07-09 12:38:05.016",
      "dateStarted": "2021-07-09 13:01:30.322",
      "dateFinished": "2021-07-09 13:01:31.049",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Data Transformation for XML Data\n\nData transformation for XML data is done in the same way as for JSON data, i.e., by applying a sequence of functions to a DataFrame. \nWe want to create a table according to the following mapping.\n\n|XML field | Mapped Attribute |\n|----|----|\n|MatchDateTime | MatchDateTime |\n|Goals.Goal.GoalGetterName | PlayerName|\n|Goals.Goal.IsOwnGoal|IsOwnGoal|\n|Goals.Goal.IsPenalty| IsPenalty|\n|Goals.Goal.GoalID|GoalID|\n|Team1.TeamName|TeamName1|\n|Team2.TeamName|TeamName2|\n\nThe first issue is unrolling the goal data such data we have a row for each goal in our DataFrame.\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 12:14:37.611",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eData Transformation for XML Data\u003c/h2\u003e\n\u003cp\u003eData transformation for XML data is done in the same way as for JSON data, i.e., by applying a sequence of functions to a DataFrame.\u003cbr /\u003e\nWe want to create a table according to the following mapping.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\u003cth\u003eXML field\u003c/th\u003e\u003cth\u003eMapped Attribute\u003c/th\u003e\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003eMatchDateTime\u003c/td\u003e\u003ctd\u003eMatchDateTime\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eGoals.Goal.GoalGetterName\u003c/td\u003e\u003ctd\u003ePlayerName\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eGoals.Goal.IsOwnGoal\u003c/td\u003e\u003ctd\u003eIsOwnGoal\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eGoals.Goal.IsPenalty\u003c/td\u003e\u003ctd\u003eIsPenalty\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eGoals.Goal.GoalID\u003c/td\u003e\u003ctd\u003eGoalID\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTeam1.TeamName\u003c/td\u003e\u003ctd\u003eTeamName1\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTeam2.TeamName\u003c/td\u003e\u003ctd\u003eTeamName2\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe first issue is unrolling the goal data such data we have a row for each goal in our DataFrame.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462418_167102978",
      "id": "20180701-210548_965922610",
      "dateCreated": "2021-07-09 09:04:22.418",
      "dateStarted": "2021-07-09 12:14:37.612",
      "dateFinished": "2021-07-09 12:14:37.637",
      "status": "FINISHED"
    },
    {
      "text": "%python\ngoaldf1 \u003d matchxml.select(matchxml.Goals, explode(matchxml.Goals.Goal).alias(\"Goal\"), matchxml.MatchDateTime, \\\n                          matchxml.Team1.TeamName.alias(\"TeamName1\"), matchxml.Team2.TeamName.alias(\"TeamName2\"))\ngoaldf \u003d goaldf1.select(goaldf1.Goal.GoalGetterName.alias(\"PlayerName\"), goaldf1.MatchDateTime, goaldf1.Goal.IsOwnGoal.alias(\"IsOwnGoal\"), \\\n        goaldf1.Goal.IsPenalty.alias(\"IsPenalty\"), goaldf1.Goal.GoalID.alias(\"GoalID\"), goaldf1.TeamName1, goaldf1.TeamName2)\n\ngoaldf.printSchema()\ngoaldf.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:08:48.174",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- PlayerName: string (nullable \u003d true)\n |-- MatchDateTime: string (nullable \u003d true)\n |-- IsOwnGoal: boolean (nullable \u003d true)\n |-- IsPenalty: boolean (nullable \u003d true)\n |-- GoalID: long (nullable \u003d true)\n |-- TeamName1: string (nullable \u003d true)\n |-- TeamName2: string (nullable \u003d true)\n\n+----------------+-------------------+---------+---------+------+-------------------+--------------------+\n|      PlayerName|      MatchDateTime|IsOwnGoal|IsPenalty|GoalID|          TeamName1|           TeamName2|\n+----------------+-------------------+---------+---------+------+-------------------+--------------------+\n|Mandzukic, Mario|2013-08-09T20:30:00|    false|    false| 21118|     Bayern München|Borussia Möncheng...|\n|   Robben, Arjen|2013-08-09T20:30:00|    false|    false| 21119|     Bayern München|Borussia Möncheng...|\n|           Dante|2013-08-09T20:30:00|     true|    false| 21132|     Bayern München|Borussia Möncheng...|\n|    Alaba, David|2013-08-09T20:30:00|    false|     true| 21133|     Bayern München|Borussia Möncheng...|\n|        Kießling|2013-08-10T15:30:00|    false|    false| 21136|Bayer 04 Leverkusen|         SC Freiburg|\n|           Hanke|2013-08-10T15:30:00|    false|    false| 21144|Bayer 04 Leverkusen|         SC Freiburg|\n|             Son|2013-08-10T15:30:00|    false|    false| 21145|Bayer 04 Leverkusen|         SC Freiburg|\n|             Sam|2013-08-10T15:30:00|    false|    false| 21146|Bayer 04 Leverkusen|         SC Freiburg|\n|       Andreasen|2013-08-10T15:30:00|    false|    false| 21134|        Hannover 96|       VfL Wolfsburg|\n|          Huszti|2013-08-10T15:30:00|    false|    false| 21155|        Hannover 96|       VfL Wolfsburg|\n|         Abraham|2013-08-10T15:30:00|    false|    false| 21142|TSG 1899 Hoffenheim|      1. FC Nürnberg|\n|         Modeste|2013-08-10T15:30:00|    false|    false| 21147|TSG 1899 Hoffenheim|      1. FC Nürnberg|\n|          Frantz|2013-08-10T15:30:00|    false|    false| 21148|TSG 1899 Hoffenheim|      1. FC Nürnberg|\n|         Ginczek|2013-08-10T15:30:00|    false|    false| 21149|TSG 1899 Hoffenheim|      1. FC Nürnberg|\n|      Aubameyang|2013-08-10T15:30:00|    false|    false| 21137|        FC Augsburg|   Borussia Dortmund|\n|      Aubameyang|2013-08-10T15:30:00|    false|    false| 21152|        FC Augsburg|   Borussia Dortmund|\n|      Aubameyang|2013-08-10T15:30:00|    false|    false| 21154|        FC Augsburg|   Borussia Dortmund|\n|     Lewandowski|2013-08-10T15:30:00|    false|     true| 21156|        FC Augsburg|   Borussia Dortmund|\n|           Ramos|2013-08-10T15:30:00|    false|    false| 21135|         Hertha BSC| Eintracht Frankfurt|\n|          Brooks|2013-08-10T15:30:00|    false|    false| 21141|         Hertha BSC| Eintracht Frankfurt|\n+----------------+-------------------+---------+---------+------+-------------------+--------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625834122176_1381286744",
      "id": "paragraph_1625834122176_1381286744",
      "dateCreated": "2021-07-09 12:35:22.176",
      "dateStarted": "2021-07-09 13:08:48.177",
      "dateFinished": "2021-07-09 13:08:48.443",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\n## Joining DataFrames\n\nNow, as we have two DataFrames with player names (`goaldf` and `teamDataExploded`), we could join them. Let\u0027s try and see the result.\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 09:04:22.419",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eJoining DataFrames\u003c/h2\u003e\n\u003cp\u003eNow, as we have two DataFrames with player names (\u003ccode\u003egoaldf\u003c/code\u003e and \u003ccode\u003eteamDataExploded\u003c/code\u003e), we could join them. Let\u0026rsquo;s try and see the result.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462419_387257342",
      "id": "20180702-132457_290661178",
      "dateCreated": "2021-07-09 09:04:22.419",
      "status": "READY"
    },
    {
      "text": "%python\n\njoindf\u003dgoaldf.join(teamDataExploded ,goaldf[\"PlayerName\"] \u003d\u003d teamDataExploded[\"PlayerName\"])\n\njoindf.createOrReplaceTempView(\"result\")\ngoaldf.createOrReplaceTempView(\"goals\")\nteamDataExploded.createOrReplaceTempView(\"teamdata\")\n\njoindf.show()",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:11:51.269",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------------+-------------------+---------+---------+------+--------------------+--------------------+----------------+--------------------+--------+\n|      PlayerName|      MatchDateTime|IsOwnGoal|IsPenalty|GoalID|           TeamName1|           TeamName2|      PlayerName|            TeamName|PlayerID|\n+----------------+-------------------+---------+---------+------+--------------------+--------------------+----------------+--------------------+--------+\n|Mandzukic, Mario|2013-08-09T20:30:00|    false|    false| 21118|      Bayern München|Borussia Möncheng...|Mandzukic, Mario|     bayern-muenchen|     133|\n|   Robben, Arjen|2013-08-09T20:30:00|    false|    false| 21119|      Bayern München|Borussia Möncheng...|   Robben, Arjen|     bayern-muenchen|     127|\n|           Dante|2013-08-09T20:30:00|     true|    false| 21132|      Bayern München|Borussia Möncheng...|           Dante|     bayern-muenchen|     116|\n|    Alaba, David|2013-08-09T20:30:00|    false|     true| 21133|      Bayern München|Borussia Möncheng...|    Alaba, David|     bayern-muenchen|     113|\n|           Ronny|2013-08-10T15:30:00|    false|    false| 21157|          Hertha BSC| Eintracht Frankfurt|           Ronny|          hertha-bsc|     253|\n|       Vieirinha|2013-08-17T15:30:00|    false|    false| 21273|       VfL Wolfsburg|       FC Schalke 04|       Vieirinha|       vfl-wolfsburg|      20|\n|           Naldo|2013-08-17T15:30:00|    false|    false| 21277|       VfL Wolfsburg|       FC Schalke 04|           Naldo|       vfl-wolfsburg|       5|\n|Kutschke, Stefan|2013-08-17T15:30:00|    false|    false| 21281|       VfL Wolfsburg|       FC Schalke 04|Kutschke, Stefan|       vfl-wolfsburg|      22|\n|Mandzukic, Mario|2013-08-17T15:30:00|    false|    false| 21253| Eintracht Frankfurt|      Bayern München|Mandzukic, Mario|     bayern-muenchen|     133|\n|      Kruse, Max|2013-08-17T18:30:00|    false|    false| 21296|Borussia Möncheng...|         Hannover 96|      Kruse, Max|borussia-möncheng...|     152|\n|           Ronny|2013-08-18T15:30:00|    false|     true| 21330|      1. FC Nürnberg|          Hertha BSC|           Ronny|          hertha-bsc|     253|\n|   Robben, Arjen|2013-08-24T15:30:00|    false|    false| 21407|      Bayern München|      1. FC Nürnberg|   Robben, Arjen|     bayern-muenchen|     127|\n|         Raffael|2013-08-31T15:30:00|    false|    false| 21586|Borussia Möncheng...|       Werder Bremen|         Raffael|borussia-möncheng...|     154|\n|      Kruse, Max|2013-08-31T15:30:00|    false|    false| 21588|Borussia Möncheng...|       Werder Bremen|      Kruse, Max|borussia-möncheng...|     152|\n|           Diego|2013-08-31T15:30:00|    false|    false| 21570|       VfL Wolfsburg|          Hertha BSC|           Diego|       vfl-wolfsburg|      13|\n|Mandzukic, Mario|2013-09-14T15:30:00|    false|    false| 21874|      Bayern München|         Hannover 96|Mandzukic, Mario|     bayern-muenchen|     133|\n|         Raffael|2013-09-20T20:30:00|    false|    false| 22091|Borussia Möncheng...|Eintracht Braunsc...|         Raffael|borussia-möncheng...|     154|\n|      Kruse, Max|2013-09-20T20:30:00|    false|     true| 22093|Borussia Möncheng...|Eintracht Braunsc...|      Kruse, Max|borussia-möncheng...|     152|\n|         Raffael|2013-09-20T20:30:00|    false|    false| 22094|Borussia Möncheng...|Eintracht Braunsc...|         Raffael|borussia-möncheng...|     154|\n|Mandzukic, Mario|2013-09-21T18:30:00|    false|    false| 22139|       FC Schalke 04|      Bayern München|Mandzukic, Mario|     bayern-muenchen|     133|\n+----------------+-------------------+---------+---------+------+--------------------+--------------------+----------------+--------------------+--------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462419_1614417406",
      "id": "20180702-132557_1889549960",
      "dateCreated": "2021-07-09 09:04:22.419",
      "dateStarted": "2021-07-09 13:11:46.550",
      "dateFinished": "2021-07-09 13:11:47.475",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Exercise\n\nUse some SQL statement to verify the result quality. How many goals are there in `goals`? How many goals are in the result?\n\nPlease note that Wikipedia reports 967 goals for the season 2013/14.",
      "user": "admin",
      "dateUpdated": "2021-07-09 09:04:22.420",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExercise\u003c/h3\u003e\n\u003cp\u003eUse some SQL statement to verify the result quality. How many goals are there in \u003ccode\u003egoals\u003c/code\u003e? How many goals are in the result?\u003c/p\u003e\n\u003cp\u003ePlease note that Wikipedia reports 967 goals for the season 2013/14.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462420_325535298",
      "id": "20180702-133706_667719327",
      "dateCreated": "2021-07-09 09:04:22.420",
      "status": "READY"
    },
    {
      "text": "%sql\n\nSELECT *\nFROM joindf\n",
      "user": "admin",
      "dateUpdated": "2021-07-09 13:13:11.528",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "count(DISTINCT GoalID)": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.zeppelin.interpreter.InterpreterException: java.io.IOException: Interpreter process is not running\n/opt/zeppelin/bin/interpreter.sh: line 294: /usr/local/spark//bin/spark-submit: No such file or directory\n\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open(RemoteInterpreter.java:129)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:271)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:444)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:72)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:172)\n\tat org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:182)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: Interpreter process is not running\n/opt/zeppelin/bin/interpreter.sh: line 294: /usr/local/spark//bin/spark-submit: No such file or directory\n\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.internal_create(RemoteInterpreter.java:157)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.open(RemoteInterpreter.java:126)\n\t... 13 more\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1625821462420_861038902",
      "id": "20180702-133118_483960412",
      "dateCreated": "2021-07-09 09:04:22.420",
      "dateStarted": "2021-07-09 13:13:11.539",
      "dateFinished": "2021-07-09 13:13:11.542",
      "status": "ERROR"
    }
  ],
  "name": "02-SemistructuredData",
  "id": "2GCXJ5PEP",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {
    "isRunning": false
  }
}